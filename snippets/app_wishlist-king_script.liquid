<script type="text/javascript">
  function initAppmate(Appmate){
    var wkSettings = {
      shop: {
        domain: '{{ shop.domain }}',
        permanent_domain: '{{ shop.permanent_domain }}',
        currency: '{{ shop.currency }}',
        name: '{{ shop.name | replace: '&amp;', '&' }}'
      },
      session: {
        customer: '{{ customer.id }}',
        customer_email: '{{ customer.email }}',
      },
      globals: {
        settings: {
          app_wk_icon: '{{ settings.app_wk_icon }}',
          app_wk_share_position: '{{ settings.app_wk_share_position }}',
          app_wk_products_per_row: {{ settings.app_wk_products_per_row }},
          money_format: '{{ shop.money_format }}',
          root_url: '{% unless request.locale.root_url == "/"  %}{{ request.locale.root_url }}{% endunless %}'
        },
        locale: {
          wishlist_empty_note: "{{ 'wishlist.general.wishlist_empty_note' | t }}",
          add_to_wishlist: "{{ 'wishlist.general.add_to_wishlist' | t }}",
          in_wishlist: "{{ 'wishlist.general.in_wishlist' | t }}",
          share_wishlist: "{{ 'wishlist.general.share_wishlist' | t }}",
          copy_share_link: "{{ 'wishlist.general.copy_share_link' | t }}",
          share_link_copied: "{{ 'wishlist.general.share_link_copied' | t }}",
          share_by_email_body: "{{ 'wishlist.general.share_by_email_body' | t }}",
          login_or_signup_note: "{{ 'wishlist.general.login_or_signup_note_html' | t: login_url: routes.account_login_url, register_url: routes.account_register_url }}",
          add_to_cart: "{{ 'wishlist.general.add_to_cart' | t }}",
          sold_out: "{{ 'wishlist.general.sold_out' | t }}",
          view_product: "{{ 'wishlist.general.view_product' | t }}",
          view_wishlist: "{{ 'wishlist.general.view_wishlist' | t }}",
          share_on_facebook: "{{ 'wishlist.general.share_on_facebook' | t }}",
          share_on_twitter: "{{ 'wishlist.general.share_on_twitter' | t }}",
          share_on_pinterest: "{{ 'wishlist.general.share_on_pinterest' | t }}",
          share_with_whatsapp: "{{ 'wishlist.general.share_with_whatsapp' | t }}",
          share_by_email: "{{ 'wishlist.general.share_by_email' | t }}",
          get_link: "{{ 'wishlist.general.get_link' | t }}",
          send_to_customer_service: "{{ 'wishlist.general.send_to_customer_service' | t }}"
        },
        customer: '{{ customer.id }}',
        customer_accounts_enabled: {{ shop.customer_accounts_enabled }},
      },
      wishlist: {
        filter: function(product) {
          return !product.hidden;
        },
        loginRequired: {{ settings.app_wk_login_required }},
        handle: "/pages/wishlist",
        proxyHandle: "/a/wk",
        share: {
          handle: "/pages/shared-wishlist",
          title: "{{ 'wishlist.general.share_list_title' | t }}",
          description: "{{ 'wishlist.general.share_list_description' | t: shopName: Appmate.config.shop.name }}",
          imageTitle: Appmate.config.shop.name,
          hashTags: 'wishlist',
          twitterUser: false
        }
      }
    };

    Appmate.wk.on({
      'click [data-wk-add-product]': eventHandler(function(){
        var productId = this.getAttribute('data-wk-add-product');
        var select = Appmate.wk.$(this).parents('form').find('select[name="id"]');
        var variantId = select.length ? select.val() : undefined;
        Appmate.wk.addProduct(productId, variantId);
      }),
      'click [data-wk-remove-product]': eventHandler(function(){
        var productId = this.getAttribute('data-wk-remove-product');
        Appmate.wk.removeProduct(productId);
      }),
      'click [data-wk-remove-item]': eventHandler(function(){
        var itemId = this.getAttribute('data-wk-remove-item');
        fadeOrNot(this, function() {
          Appmate.wk.removeItem(itemId);
        });
      }),
      'click [data-wk-clear-wishlist]': eventHandler(function(){
        var wishlistId = this.getAttribute('data-wk-clear-wishlist');
        Appmate.wk.clear(wishlistId);
      }),
      'click [data-wk-move-to-cart]': eventHandler(function(){
        var $elem = Appmate.wk.$(this);
        $form = $elem.parents('form');
        $elem.prop("disabled", true);

        var item = this.getAttribute('data-wk-move-to-cart');
        var formData = $form.serialize();

        fadeOrNot(this, function(){
          Appmate.wk
          .moveToCart(item, formData)
          .then(function(product){
            $elem.prop("disabled", false);

            Appmate.wk.trackEvent("Added to Cart", {
              product: product,
              variant: product.selected_or_first_available_variant || {},
              callback: function () {
                window.scrollTo(0, 0);
                location.reload();
              },
            });
          });
        });
      }),
      'click [data-wk-share]': eventHandler(function(){
        var params = {
          wkShareService: this.getAttribute("data-wk-share-service"),
          wkShare: this.getAttribute("data-wk-share"),
          wkShareImage: this.getAttribute("data-wk-share-image")
        };
        var shareLink = Appmate.wk.getShareLink(params);

        Appmate.wk.trackEvent("Shared Wishlist", {
          shareService: params.wkShareService
        });

        switch (params.wkShareService) {
          case 'link':
            Appmate.wk.$('#wk-share-link-text').addClass('wk-visible').find('.wk-text').html(shareLink);
            var copyButton = Appmate.wk.$('#wk-share-link-text .wk-clipboard');
            var copyText = copyButton.html();
            var clipboard = Appmate.wk.clipboard(copyButton[0]);
            clipboard.on('success', function(e) {
              copyButton.html(Appmate.globals.locale.share_link_copied);
              setTimeout(function(){
                copyButton.html(copyText);
              }, 2000);
            });
            break;
          case 'email':
            window.location.href = shareLink;
            break;
          case 'contact':
            var contactUrl = '/pages/contact';
            var message = Appmate.globals.locale.share_by_email_body + '\n' + shareLink;
            window.location.href=contactUrl + '?message=' + encodeURIComponent(message);
            break;
          default:
            window.open(
              shareLink,
              'wishlist_share',
              'height=590, width=770, toolbar=no, menubar=no, scrollbars=no, resizable=no, location=no, directories=no, status=no'
            );
        }
      }),
      'render .wk-option-select': function(elem){
        if (!Appmate.globals.settings.root_url) {
          appmateOptionSelect(elem);
        }
      },
      'render [data-wk-item]': function(elem){
        if (Appmate.globals.settings.root_url) {
          Appmate.wk.getItem(elem.getAttribute("data-wk-item")).then(function(product) {
            Appmate.wk.loadProduct(product.handle)
            .then(function(product) {
              const select = Appmate.wk.$(elem).find(".wk-option-select")[0];
              product.options = product.options.map(function(option){return option.name});
              product.variants.forEach(function(variant){variant.product_id = product.id});
              appmateOptionSelect(select, product);

              Appmate.wk.$(elem).find(".wk-product-title a").html(product.title).css({opacity: 1});
            })
          });
        }
      },
      'login-required': function (intent) {
        var redirect = {
          path: window.location.pathname,
          intent: intent
        };
        window.location = '/account/login?wk-redirect=' + encodeURIComponent(JSON.stringify(redirect));
      },
      'ready': function () {
        var redirect = Appmate.wk.getQueryParam('wk-redirect');
        if (redirect) {
          Appmate.wk.addLoginRedirect(Appmate.wk.$('#customer_login'), JSON.parse(redirect));
        }
        var intent = Appmate.wk.getQueryParam('wk-intent');
        if (intent) {
          intent = JSON.parse(intent);
          switch (intent.action) {
            case 'addProduct':
              Appmate.wk.addProduct(intent.product, intent.variant)
              break;
            default:
              console.warn('Wishlist King: Intent not implemented', intent)
          }
          if (window.history && window.history.pushState) {
            history.pushState(null, null, window.location.pathname);
          }
        }
      }
    });

    Appmate.init(wkSettings);

    function appmateSelectCallback(variant, selector) {
      var shop = Appmate.wk.globals.shop;
      var product = Appmate.wk.getProduct(variant.product_id);
      var itemId = Appmate.wk.$(selector.variantIdField).parents('[data-wk-item]').attr('data-wk-item');
      var container = Appmate.wk.$('#wk-item-' + itemId);

      {% if page.template_suffix == 'wishlist' %}
      if (variant) {
        Appmate.wk.updateItem(itemId, {selected_variant_id: variant.id});
      }
      {% endif %}

      var imageUrl = '';

      if (variant && variant.image) {
        imageUrl = Appmate.wk.filters.img_url(variant, '1000x');
      } else if (product) {
        imageUrl = Appmate.wk.filters.img_url(product, '1000x');
      }

      if (imageUrl) {
        container.find('.wk-variant-image').attr('src', imageUrl);
      }

      var formatMoney = Appmate.wk.filters.money;

      if (!product.hidden && variant && (variant.available || variant.inventory_policy === 'continue')) {
        container.find('.wk-add-to-cart').removeAttr('disabled').removeClass('disabled').attr('value', Appmate.globals.locale.add_to_cart);
        if(parseFloat(variant.price) < parseFloat(variant.compare_at_price)){
          container.find('.wk-price-preview').html(formatMoney(variant.price) + " <del>" + formatMoney(variant.compare_at_price) + "</del>");
        } else {
          container.find('.wk-price-preview').html(formatMoney(variant.price));
        }
      } else {
        container.find('.wk-add-to-cart').addClass('disabled').attr('disabled', 'disabled').attr('value', message);
        container.find('.wk-price-preview').text(Appmate.globals.locale.sold_out);
      }
    };

    function appmateOptionSelect(el, translatedPoduct){
      if (!Shopify || !Shopify.OptionSelectors) {
        throw new Error('Missing option_selection.js! Please check templates/page.wishlist.liquid');
      }

      var id = el.getAttribute('id');
      var itemId = Appmate.wk.$(el).parents('[data-wk-item]').attr('data-wk-item');
      var container = Appmate.wk.$('#wk-item-' + itemId);

      Appmate.wk.getItem(itemId).then(function(product){
        var selector = new Shopify.OptionSelectors(id, {
          product: translatedPoduct || product,
          onVariantSelected: appmateSelectCallback,
          enableHistoryState: false
        });

        if (product.selected_variant_id) {
          selector.selectVariant(product.selected_variant_id);
        }

        selector.selectors.forEach(function(selector){
          if (selector.values.length < 2) {
            Appmate.wk.$(selector.element).parents(".selector-wrapper").css({display: "none"});
          }
        });

        for (var i = 0; i < selector.selectors.length; i++) {
          for (var j = 0; j < selector.selectors[i].values.length; j++) {
            var originalIndex = (i + 1) * j;
            var disabled = selector.variantIdField.options[originalIndex].getAttribute("disabled");
            if (disabled) {
              selector.selectors[i].element.options[j].setAttribute("disabled", disabled);
            } else {
              selector.selectors[i].element.options[j].removeAttribute("disabled");
            }
          }
        }

        // Add label if only one product option and it isn't 'Title'.
        if (product.options.length == 1 && product.options[0] != 'Title') {
          Appmate.wk.$(container)
          .find('.selector-wrapper:first-child')
          .prepend('<label>' + product.options[0] + '</label>');
        }
      });
    }

    function eventHandler (callback) {
      return function (event) {
        if (typeof callback === 'function') {
          callback.call(this, event)
        }
        if (event) {
          event.preventDefault();
          event.stopPropagation();
        }
      }
    }

    function fadeOrNot(elem, callback, shouldNotFade){
      if (typeof $ !== "function") {
        callback();
        return;
      }
      var $elem = $(elem);
  	  if (!shouldNotFade && $elem.parents('.wk-fadeout').length) {
        $elem.parents('.wk-fadeout').fadeOut(callback);
      } else {
        callback();
      }
    }
  }
</script>

{% render 'app_wishlist-king_markup' %}

<script
  src="{{ 'appmate_wishlist-king_toolkit.js' | asset_url }}"
  async
></script>

<link
  href="{{ 'app_wishlist-king_styles.scss' | asset_url }}"
  rel="stylesheet"
>
